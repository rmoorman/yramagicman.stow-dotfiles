function pkg() {
    zparseopts -E -D -A opts a:=alt -alt:=alt f:=from -from:=from -theme=theme t=theme d:=depends
    local alternate=$alt[2]
    local src=$from[2]
    local deps=$depends[2]
    if [[ "$1" == 'init' ]]; then
        pkgs=()
        return
    elif [[ "$1" == 'load' ]]; then
        procs=()
        _load_pkgs
        if [[ $#procs -gt 0 ]] && [[ $errs -eq 0 ]]; then
            echo 'reloading...'
            mkdir -p "$MODULES_DIR/log_backups"
            command mv $MODULES_DIR/logs/ $MODULES_DIR/log_backups/logs_$( date +'%j%H%M%S' )
            # du -h "$MODULES_DIR/log_backups"
            source $HOME/.zshrc
        elif [[ $errs -gt 0 ]]; then
            _handle_errors
        else
            # do nothing
        fi
        unset procs
        unset errs
        return
    elif [[ $1 == 'clear-errors' ]]; then
        _clear_errors
    elif [[ $1 == 'clear-logs' ]]; then
        _clear_logs
    elif [[ "$1" == 'update' ]]; then
        _update $pkgs
    fi
    if [[ $alternate ]]; then
        pkgs+=($1 $alternate)
    elif [[ $src ]]; then
        if [[ $src =~ '^(omz|ohmyzsh|oh-my-zsh)' ]]; then
            local d=("${(@s#,#)deps}")
            if [[ $theme ]]; then
                pkgs+=('robbyrussell/oh-my-zsh' "themes/$1")
                _source_deps 'robbyrussell/oh-my-zsh'
            else
                pkgs+=('robbyrussell/oh-my-zsh' "plugins/$1/$1")
                _source_deps 'robbyrussell/oh-my-zsh'
            fi
        fi
        if [[ $src =~ '^(prezto)' ]]; then
            pkgs+=('sorin-ionescu/prezto' "modules/$1/init")
            _source_deps 'sorin-ionescu/prezto'
        fi
    else
        pkgs+=($1 0)
    fi
}

function _source_deps() {
    if [[ $d ]]; then
        for p in $d; do
            pkgs+=("$1" "$p")
        done
    fi
}

function _handle_errors {

    echo 'There were errors cloning your plugins, showing them now'
    echo "Errors are listed by PID in $MODULES_DIR/logs"
    (
    cd $MODULES_DIR/logs
    if [[ $PAGER ]]; then
        cat $(grep -li 'error' *) | $PAGER
    elif [[ $( command -v less ) ]]; then
        cat $(grep -li 'error' *) | less
    elif [[ $( command -v more ) ]]; then
        cat $(grep -li 'error' *) | more
    else
        cat $(grep -li 'error' *)
    fi
)
_clear_errors
}

function _clear_errors() {

    local clear
    echo 'Clear errors? {y or yes to confirm, all else cancels}'
        read clear
        if [[ $clear =~ '^(y|Y|yes|Yes|YES)' ]]; then
            command rm -r $MODULES_DIR/logs
        fi
        unset clear
    }
function _clear_logs() {

    local clear
    echo 'Clear logs? {y or yes to confirm, all else cancels}'
        read clear
        if [[ $clear =~ '^(y|Y|yes|Yes|YES)' ]]; then
            if [[ -d  "$MODULES_DIR/logs" ]]; then
                command rm -r "$MODULES_DIR/logs"
            fi
            if [[ -d  "$MODULES_DIR/log_backups" ]]; then
                command rm -r "$MODULES_DIR/log_backups"
            fi
        fi
        unset clear
    }

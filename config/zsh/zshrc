#!usr/bin/env zsh
emulate zsh
#{{{ profiling tools
PROFILE_STARTUP=false
if [[ "$PROFILE_STARTUP" == true ]]; then
    zmodload zsh/zprof
    # http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
    PS4=$'%D{%M%S%.} %N:%i> '
    exec 3>&2 2>$HOME/startlog.$$
    setopt xtrace prompt_subst
fi
#}}}
#{{{ install functions
fpath=("$ZDOTDIR/pkg" $fpath)
autoload $ZDOTDIR/pkg/*
#}}}
#{{{ Load packages
pkg init
[[ -z "$INSIDE_EMACS" ]] && pkg colored-man-pages -f omz
pkg zsh-users/zsh-completions
pkg agkozak/zsh-z
pkg "git@gitlab.com:yramagicman/zsh-aliases"
pkg load
pkg update
jit "$HOME/.zshenv"
jit "$ZDOTDIR/.zshrc"
#}}}
#{{{ Set zsh options for general runtime.
#
# Load the prompt system and completion system and initilize them
autoload -Uz compinit promptinit
# Load and initialize the completion system ignoring insecure directories with a
# cache time of 20 hours, so it should almost always regenerate the first time a
# shell is opened each day.
_comp_files=(${ZDOTDIR:-$HOME}/.zcompdump(Nm-20))
if (( $#_comp_files )); then
    compinit -i -C
else
    compinit -i
fi
unset _comp_files
promptinit
setopt prompt_subst

# load colors
autoload -U colors && colors

# Use case-insensitve globbing.
unsetopt case_glob
# glob dotfiles as well
setopt globdots
# use extended globbing
setopt extendedglob

# Automatically change directory if a directory is entered
setopt autocd

#
# Smart URLs
#
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

#
# General
#

# Allow brace character class list expansion.
setopt brace_ccl
# Combine zero-length punctuation characters (accents) with the base character.
setopt combining_chars
# Allow 'Henry''s Garage' instead of 'Henry'\''s Garage'.
setopt rc_quotes
# Don't print a warning message if a mail file has been accessed.
unsetopt mail_warning

#
# Jobs
#
# List jobs in the long format by default.
setopt long_list_jobs
# Attempt to resume existing job before creating a new process.
setopt auto_resume
# Report status of background jobs immediately.
setopt notify
# Don't run all background jobs at a lower priority.
unsetopt bg_nice
# Don't kill jobs on shell exit.
unsetopt hup
# Don't report on jobs when shell exit.
unsetopt check_jobs

# turn on corrections
setopt correct

setopt beep
# use emacs bindings
bindkey -e
# Disable some shell keyboard shortcuts
stty -ixon > /dev/null 2>/dev/null
#}}}
#{{{ completion
#{{{ options
# Complete from both ends of a word.
setopt complete_in_word
# Move cursor to the end of a completed word.
setopt always_to_end
# Perform path search even on command names with slashes.
setopt path_dirs
# Show completion menu on a successive tab press.
setopt auto_menu
# Automatically list choices on ambiguous completion.
setopt auto_list
# If completed parameter is a directory, add a trailing slash.
setopt auto_param_slash
setopt no_complete_aliases
# Do not autoselect the first completion entry.
setopt menu_complete
# Disable start/stop characters in shell editor.
unsetopt flow_control
#}}}
#{{{ zstyle
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path "$HOME/.zcompcache"
zstyle ':completion:*' list-colors $LS_COLORS
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'
zstyle ':completion:*' rehash true
#}}}
#}}}
#{{{ history
HISTFILE="$ZDOTDIR/.zhistory"
HISTSIZE=10000000
SAVEHIST=10000000
setopt appendhistory notify
unsetopt beep nomatch
# Treat the '!' character specially during expansion.
setopt bang_hist
# Write to the history file immediately, not when the shell exits.
setopt inc_append_history
# Share history between all sessions.
setopt share_history
# Expire a duplicate event first when trimming history.
setopt hist_expire_dups_first
# Do not record an event that was just recorded again.
setopt hist_ignore_dups
# Delete an old recorded event if a new event is a duplicate.
setopt hist_ignore_all_dups
# Do not display a previously found event.
setopt hist_find_no_dups
# Do not record an event starting with a space.
setopt hist_ignore_space
# Do not write a duplicate event to the history file.
setopt hist_save_no_dups
# Do not execute immediately upon history expansion.
setopt hist_verify
# Show timestamp in history
setopt extended_history
#}}}
#{{{ prompt
prompt serenity || prompt adam2
#}}}
#{{{ grab the rest of the packages

[[ -f /usr/share/doc/pkgfile/command-not-found.zsh ]] && source /usr/share/doc/pkgfile/command-not-found.zsh

if [[ -d /usr/share/fzf ]]; then
    source /usr/share/fzf/key-bindings.zsh
    source /usr/share/fzf/completion.zsh
fi
#}}}
#{{{ lazy load stuff
if [[ "$TMUX" != '' ]] && [[ -z "$(pgrep tmuxcopy)" ]]; then
    setopt nonotify nomonitor
    tmuxcopy &
    disown
    unsetopt nonotify nomonitor
fi
function workon() {
    echo " working.."
    if [[ -f $VIRTUALENVWRAPPER_SCRIPT ]] then
        source $VIRTUALENVWRAPPER_SCRIPT   &> /dev/null
        workon "$@"
    else
        echo "virtualenvwrapper.sh not at  /usr/bin/virtualenvwrapper.sh"
    fi
}

function artisan() {
    php artisan $*
}
#}}}
#{{{ key bindings,
# Allow command line editing in an external editor.
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M emacs "^[[Z" reverse-menu-complete
bindkey -M emacs "\C-X\C-E" edit-command-line

# Runs bindkey but for all of the keymaps. Running it with no arguments will
# print out the mappings for all of the keymaps.
function bindkey-all {
local keymap=''
for keymap in $(bindkey -l); do
    [[ "$#" -eq 0 ]] && printf "#### %s\n" "${keymap}" 1>&2
    bindkey -M "${keymap}" "$@"
done
}
#}}}
#{{{ cdr, persistent cd
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
DIRSTACKFILE="$HOME/.cache/zsh/dirs"

# make DIRSTACKFILE if it's not there
if [[ ! -a $DIRSTACKFILE ]]; then
    mkdir -p $DIRSTACKFILE[0,-5]
    touch $DIRSTACKFILE
fi

if [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then
    dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
fi

chpwd() {
    print -l $PWD ${(u)dirstack} >>$DIRSTACKFILE
    local d="$(sort -u $DIRSTACKFILE )"
    echo "$d" > $DIRSTACKFILE

}

DIRSTACKSIZE=20

setopt auto_pushd pushd_silent pushd_to_home

# Remove duplicate entries
setopt pushd_ignore_dups

# This reverts the +/- operators.
setopt pushd_minus

#}}}
#{{{ start tmux,
if [[ -z "$TMUX" && -z "$INSIDE_EMACS" && -z "$VIM" && -z "$SSH_TTY" ]]; then
    if [[ -z $( pgrep tmux$ ) ]] then
        s tmux
    fi
fi
#}}}
#{{{ Temporary Files
TMPPREFIX="$(mktemp -d)/zsh"
#}}}
#{{{ end profiling script
if [[ "$PROFILE_STARTUP" == true ]]; then
    unsetopt xtrace
    exec 2>&3 3>&-
    zprof > ~/zshprofile$(date +'%s')
fi
#}}}
find ./ -type f -name "*.zwc"

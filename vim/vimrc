"{{{ nvim patch for nixos
if has('nvim')
    function! NixosPluginPath()
        let seen = {}
        for p in reverse(split($NIX_PROFILES))
            for d in split(glob(p . '/share/vim-plugins/*'))
                let pluginname = substitute(d, ".*/", "", "")
                if !has_key(seen, pluginname)
                    exec 'set runtimepath^='.d
                    let after = d."/after"
                    if isdirectory(after)
                        exec 'set runtimepath^='.after
                    endif
                    let seen[pluginname] = 1
                endif
            endfor
        endfor
        let home=getenv('HOME') . '/.vim'
        exec 'set runtimepath^='.home
    endfunction
    execute NixosPluginPath()
endif
"}}}
"{{{ defaults
if filereadable(expand('$VIMRUNTIME/defaults.vim'))
    unlet! g:skip_defaults_vim
    source $VIMRUNTIME/defaults.vim
endif

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Switch syntax highlighting on
syntax on
"}}}
let g:polyglot_is_disabled = {}
let g:javascript_sql_dialect = 'javascript'
 if filereadable($HOME.'/Documents/dots/vim/autoload/plug.vim') == 0
     echom system( 'curl https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim -o '. $HOME. '/Documents/dots/vim/autoload/plug.vim' )
 endif
call plug#begin($HOME.'/.local/share/vim')
" Plug 'git@gitlab.com:yramagicman/auto-omnicomplete'
if has('nvim')
    Plug 'williamboman/nvim-lsp-installer'
    Plug 'neovim/nvim-lspconfig'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
endif
Plug 'bronson/vim-visual-star-search'
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/vim-indent-object'
Plug 'sheerun/vim-polyglot'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
call plug#end()
packadd! matchit
if ! has('nvim')
    packadd! editexisting
endif

" let g:completion_delay = 150
" let g:AutoOmniComplete_tab = 1
" let g:AutoOmniComplete_complete_map = "\<c-n>"
"}}}
"{{{ colors
set background=dark
colorscheme portable
"}}}
"{{{ autocommands for loading extensions
augroup extensions
    autocmd!
    autocmd BufRead *.org  set filetype=org
    autocmd FileType vue syn sync fromstart
augroup end
"}}}
let mapleader=" "
" let g:NoAutoPairs = 1
" expand( '%:e') extension
" expand( '%:h') filename
" expand( '%:p') real path
" expand( '%:t') directory
" expand( '%:S') path as string

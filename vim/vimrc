"{{{ nvim patch for nixos
if has('nvim')
    function! NixosPluginPath()
        let seen = {}
        for p in reverse(split($NIX_PROFILES))
            for d in split(glob(p . '/share/vim-plugins/*'))
                let pluginname = substitute(d, ".*/", "", "")
                if !has_key(seen, pluginname)
                    exec 'set runtimepath^='.d
                    let after = d."/after"
                    if isdirectory(after)
                        exec 'set runtimepath^='.after
                    endif
                    let seen[pluginname] = 1
                endif
            endfor
        endfor
        let home=getenv('HOME') . '/.vim'
        exec 'set runtimepath^='.home
    endfunction
    execute NixosPluginPath()
endif
"}}}
"{{{ defaults
if filereadable(expand('$VIMRUNTIME/defaults.vim'))
    unlet! g:skip_defaults_vim
    source $VIMRUNTIME/defaults.vim
endif

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Switch syntax highlighting on
syntax on
"}}}
"{{{ Plugin loading and settings
let g:VimPack_Setup_Folders = ['after',
            \ 'autoload',
            \ 'backup',
            \ 'colors',
            \ 'doc',
            \ 'spell',
            \ 'swaps',
            \ 'syntax',
            \ 'plugin',
            \ 'undo',
            \ 'nvim_undo' ]
let g:VimPack_Auto_Install = 1
let g:VimPack_Auto_Update = 1
let g:polyglot_is_disabled = {}
let g:javascript_sql_dialect = 'javascript'

call pack#load()

" PlugOpt 'w0rp/ale'
PlugOpt 'git@gitlab.com:yramagicman/auto-omnicomplete'
if executable('fzf')
    if isdirectory('/usr/local/opt/fzf')
        set runtimepath+=/usr/local/opt/fzf
    endif
    PlugOpt 'junegunn/fzf.vim'
    packadd! fzf
endif

" if has('nvim')
"     PlugOpt 'williamboman/nvim-lsp-installer'
"     PlugOpt 'neovim/nvim-lspconfig'
"     packadd! nvim-lsp-installer
"     packadd! nvim-lspconfig
" endif
PlugOpt 'bronson/vim-visual-star-search'
PlugOpt 'editorconfig/editorconfig-vim'
PlugOpt 'tpope/vim-commentary'
PlugOpt 'tpope/vim-repeat'
PlugOpt 'tpope/vim-surround'
PlugOpt 'vim-scripts/vim-indent-object'
" PlugOpt 'morhetz/gruvbox'
PlugOpt 'wuelnerdotexe/vim-enfocado'
PlugOpt 'sheerun/vim-polyglot'
packadd! matchit
" packadd! ale
packadd! auto-omnicomplete
packadd! vim-visual-star-search
packadd! editorconfig-vim
packadd! vim-commentary
packadd! vim-repeat
packadd! vim-surround
packadd! vim-indent-object
packadd! vim-polyglot
if has('nvim')
    " I don't know what happened here, but the plugin got cloned into the wrong
    " directory. Easy fix is to set the name to the destination directory
    packadd! vim-enfocad
else
    packadd! vim-enfocado
endif
" packadd! gruvbox
if ! has('nvim')
    packadd! editexisting
endif

let g:completion_delay = 150
let g:AutoOmniComplete_tab = 1
let g:AutoOmniComplete_complete_map = "\<c-n>"
"}}}
"{{{ colors
set background=dark
let g:enfocado_style = 'nature' " Available: `nature` or `neon`.
colorscheme enfocado
hi normal ctermbg=0 guibg=#000000
"}}}
"{{{ autocommands for loading extensions
augroup extensions
    autocmd!
    " autocmd FileType python,php,c,cpp,zsh,sh silent! packadd ale | redraw
    autocmd BufRead *.org  set filetype=org
    autocmd FileType vue syn sync fromstart
augroup end
"}}}
"{{{ ale settings
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_text_changed = 0
"}}}
let mapleader=" "
let g:NoAutoPairs = 1
" expand( '%:e') extension
" expand( '%:h') filename
" expand( '%:p') real path
" expand( '%:t') directory
" expand( '%:S') path as string
